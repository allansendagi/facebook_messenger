{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","variant","component","color","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","prompt","collection","orderBy","onSnapshot","snapshop","docs","map","doc","id","data","src","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"+TAuBeA,EAnBCC,sBAAW,WAAsBC,GAAS,IAA7BC,EAA4B,EAA5BA,QACtBC,EADkD,EAAnBC,WACXF,EAAQE,SAClC,OACC,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAC9C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAQ,oBAAsB,sBAC3C,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACCC,QAAQ,KACRC,UAAU,KACVC,MAAM,UAEHR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MALH,IAK0DF,EAAQA,e,wBCA5DU,EAbIC,IAASC,cAAc,CACxCC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,Y,+BCuDRC,MAzDf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEkBF,mBAAS,IAF3B,mBAEPG,EAFO,KAEGC,EAFH,OAIkBJ,mBAAS,IAJ3B,mBAIPrB,EAJO,KAIG0B,EAJH,KA2Bb,OAXDC,qBAAU,WACPD,EAAYE,OAAO,6BACpB,IAEFD,qBAAU,WACTnB,EAAGqB,WAAW,YACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACXP,EAAYO,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAACC,GAAGD,EAAIC,GAAItC,QAAQqC,EAAIE,iBAEhE,IAEC,yBAAKpC,UAAU,OACf,yBAAKqC,IAAI,+FACR,uDACA,uCAAatC,GACb,0BAAMC,UAAU,aACnB,kBAACsC,EAAA,EAAD,CAAatC,UAAU,oBACrB,kBAACuC,EAAA,EAAD,CAAOvC,UAAU,aAAawC,YAAY,qBAAqBC,MAAOpB,EAAOqB,SAAU,SAAAC,GAAK,OAAIrB,EAASqB,EAAMC,OAAOH,UACrH,kBAACI,EAAA,EAAD,CACC7C,UAAU,kBACV8C,UAAWzB,EACXjB,QAAQ,YACRE,MAAM,UACNyC,KAAK,SACLC,QAnCe,SAACL,GACpBA,EAAMM,iBACN1C,EAAGqB,WAAW,YAAYsB,IAAI,CAC7BrD,QAASwB,EACTtB,SAAUA,EACVoD,UAAW3C,IAASU,UAAUkC,WAAWC,oBAE1C/B,EAAS,MA6BL,kBAAC,IAAD,SAIA,kBAAC,IAAD,KAEDC,EAASU,KAAI,gBAAEE,EAAF,EAAEA,GAAItC,EAAN,EAAMA,QAAN,OACb,kBAAC,EAAD,CAASyD,IAAKnB,EAAIpC,SAAUA,EAAUF,QAASA,UChDhC0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3E,c","file":"static/js/main.e6ffbf03.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\nimport \"./Message.css\";\nimport {Card, CardContent, Typography} from '@material-ui/core';\n\nconst Message = forwardRef(({message, username}, ref) => {\n\tconst isUser = username===message.username\n\treturn(\n\t\t<div ref={ref} className={`message ${isUser && 'message__user'}`}>\n\t\t <Card className={isUser? \"message__userCard\" : \"message__guestCard\"}>\n\t      <CardContent>\n\t        <Typography \n\t         variant=\"h5\" \n\t         component=\"h2\"\n\t         color=\"white\" \n\t          >\n\t          {!isUser && `${message.username || \"Unknown User\"} :`} {message.message}\n\t        </Typography>\n\t      </CardContent>\n  \t\t  </Card>\n  \t\t  </div>\n\t)\n})\n\nexport default Message;","import firebase from \"firebase\";\n\nconst firebaseApp =firebase.initializeApp({\n  apiKey: \"AIzaSyBF6sMiA5Qrvg7so1Z9z37rOYq7NcvqlvM\",\n  authDomain: \"facebook-messenger-f2fef.firebaseapp.com\",\n  databaseURL: \"https://facebook-messenger-f2fef.firebaseio.com\",\n  projectId: \"facebook-messenger-f2fef\",\n  storageBucket: \"facebook-messenger-f2fef.appspot.com\",\n  messagingSenderId: \"524101676363\",\n  appId: \"1:524101676363:web:483bef29e2dfe8f5084cce\",\n  measurementId: \"G-H71Z8T8J1W\"\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React, {useState, useEffect} from 'react';\nimport firebase from 'firebase';\nimport Message from './Message';\nimport {Button, FormControl, InputLabel, Input} from \"@material-ui/core\";\nimport FlipMove from \"react-flip-move\";\nimport db from \"./firebase\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport IconButton from '@material-ui/core/IconButton';\n\nimport './App.css';\n\nfunction App() {\n\tconst [input, setInput] = useState(\"\");\n\tconst [messages, setMessages] = useState([]);\n\n\tconst [username, setUsername] = useState('');\n\n\tconst sendMessage = (event) => {\n\t\tevent.preventDefault();\n\t\tdb.collection(\"messages\").add({\n\t\t\tmessage: input,\n\t\t\tusername: username,\n\t\t\ttimestamp: firebase.firestore.FieldValue.serverTimestamp()\n\t\t})\n\t\tsetInput('')\n\t}\n\n\tuseEffect(() => {\n\t   setUsername(prompt(\"please enter your name\"))\n\t},[])\n\n\tuseEffect(() => {\n\t\tdb.collection(\"messages\")\n\t\t.orderBy(\"timestamp\", \"desc\")\n\t\t.onSnapshot(snapshop => {\n\t\t\tsetMessages(snapshop.docs.map((doc) => ({id:doc.id, message:doc.data()})))\n\t\t})\n\t},[])\n  return (\n    <div className=\"app\">\n    <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" />\n\t    <h1>Send your messages Here</h1>\n\t    <h2>Welcome {username}</h2>\n\t    <form className=\"app__form\">\n\t\t<FormControl className=\"app__formControl\">\n\t\t  <Input className=\"app__input\" placeholder=\"Enter a message...\" value={input} onChange={event => setInput(event.target.value)}/>\n\t\t  \t<IconButton\n\t\t\t  \tclassName=\"app__iconButton\"\n\t\t\t  \tdisabled={!input} \n\t\t\t  \tvariant=\"contained\" \n\t\t\t  \tcolor=\"primary\" \n\t\t\t  \ttype=\"submit\" \n\t\t\t  \tonClick={sendMessage}>\t\t  \t\t\n\t\t  \t <SendIcon />\n\t\t  \t</IconButton>\n\t\t </FormControl>\n\t   \t </form>\n\t   \t <FlipMove>\n  \t\t{\n  \t\t\tmessages.map(({id, message}) => (\n  \t\t\t<Message key={id} username={username} message={message} />\n  \t\t\t))\n  \t      }\n  \t     </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}